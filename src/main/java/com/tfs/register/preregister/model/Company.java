package com.tfs.register.preregister.model;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-15")
public class Company implements org.apache.thrift.TBase<Company, Company._Fields>, java.io.Serializable, Cloneable, Comparable<Company> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Company");

  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_LOCAL_FIELD_DESC = new org.apache.thrift.protocol.TField("companyNameLocal", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("companyAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TXT_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("txtEmail", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTACT_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("contactPerson", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompanyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompanyTupleSchemeFactory());
  }

  public String companyName; // required
  public String companyNameLocal; // optional
  public String companyAddress; // optional
  public String txtEmail; // optional
  public String telephone; // optional
  public String contactPerson; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_NAME((short)1, "companyName"),
    COMPANY_NAME_LOCAL((short)2, "companyNameLocal"),
    COMPANY_ADDRESS((short)3, "companyAddress"),
    TXT_EMAIL((short)4, "txtEmail"),
    TELEPHONE((short)5, "telephone"),
    CONTACT_PERSON((short)6, "contactPerson");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_NAME
          return COMPANY_NAME;
        case 2: // COMPANY_NAME_LOCAL
          return COMPANY_NAME_LOCAL;
        case 3: // COMPANY_ADDRESS
          return COMPANY_ADDRESS;
        case 4: // TXT_EMAIL
          return TXT_EMAIL;
        case 5: // TELEPHONE
          return TELEPHONE;
        case 6: // CONTACT_PERSON
          return CONTACT_PERSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMPANY_NAME_LOCAL,_Fields.COMPANY_ADDRESS,_Fields.TXT_EMAIL,_Fields.TELEPHONE,_Fields.CONTACT_PERSON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME_LOCAL, new org.apache.thrift.meta_data.FieldMetaData("companyNameLocal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("companyAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TXT_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("txtEmail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTACT_PERSON, new org.apache.thrift.meta_data.FieldMetaData("contactPerson", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Company.class, metaDataMap);
  }

  public Company() {
  }

  public Company(
    String companyName)
  {
    this();
    this.companyName = companyName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Company(Company other) {
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    if (other.isSetCompanyNameLocal()) {
      this.companyNameLocal = other.companyNameLocal;
    }
    if (other.isSetCompanyAddress()) {
      this.companyAddress = other.companyAddress;
    }
    if (other.isSetTxtEmail()) {
      this.txtEmail = other.txtEmail;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetContactPerson()) {
      this.contactPerson = other.contactPerson;
    }
  }

  public Company deepCopy() {
    return new Company(this);
  }

  @Override
  public void clear() {
    this.companyName = null;
    this.companyNameLocal = null;
    this.companyAddress = null;
    this.txtEmail = null;
    this.telephone = null;
    this.contactPerson = null;
  }

  public String getCompanyName() {
    return this.companyName;
  }

  public Company setCompanyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public String getCompanyNameLocal() {
    return this.companyNameLocal;
  }

  public Company setCompanyNameLocal(String companyNameLocal) {
    this.companyNameLocal = companyNameLocal;
    return this;
  }

  public void unsetCompanyNameLocal() {
    this.companyNameLocal = null;
  }

  /** Returns true if field companyNameLocal is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyNameLocal() {
    return this.companyNameLocal != null;
  }

  public void setCompanyNameLocalIsSet(boolean value) {
    if (!value) {
      this.companyNameLocal = null;
    }
  }

  public String getCompanyAddress() {
    return this.companyAddress;
  }

  public Company setCompanyAddress(String companyAddress) {
    this.companyAddress = companyAddress;
    return this;
  }

  public void unsetCompanyAddress() {
    this.companyAddress = null;
  }

  /** Returns true if field companyAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyAddress() {
    return this.companyAddress != null;
  }

  public void setCompanyAddressIsSet(boolean value) {
    if (!value) {
      this.companyAddress = null;
    }
  }

  public String getTxtEmail() {
    return this.txtEmail;
  }

  public Company setTxtEmail(String txtEmail) {
    this.txtEmail = txtEmail;
    return this;
  }

  public void unsetTxtEmail() {
    this.txtEmail = null;
  }

  /** Returns true if field txtEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetTxtEmail() {
    return this.txtEmail != null;
  }

  public void setTxtEmailIsSet(boolean value) {
    if (!value) {
      this.txtEmail = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public Company setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getContactPerson() {
    return this.contactPerson;
  }

  public Company setContactPerson(String contactPerson) {
    this.contactPerson = contactPerson;
    return this;
  }

  public void unsetContactPerson() {
    this.contactPerson = null;
  }

  /** Returns true if field contactPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetContactPerson() {
    return this.contactPerson != null;
  }

  public void setContactPersonIsSet(boolean value) {
    if (!value) {
      this.contactPerson = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((String)value);
      }
      break;

    case COMPANY_NAME_LOCAL:
      if (value == null) {
        unsetCompanyNameLocal();
      } else {
        setCompanyNameLocal((String)value);
      }
      break;

    case COMPANY_ADDRESS:
      if (value == null) {
        unsetCompanyAddress();
      } else {
        setCompanyAddress((String)value);
      }
      break;

    case TXT_EMAIL:
      if (value == null) {
        unsetTxtEmail();
      } else {
        setTxtEmail((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case CONTACT_PERSON:
      if (value == null) {
        unsetContactPerson();
      } else {
        setContactPerson((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_NAME:
      return getCompanyName();

    case COMPANY_NAME_LOCAL:
      return getCompanyNameLocal();

    case COMPANY_ADDRESS:
      return getCompanyAddress();

    case TXT_EMAIL:
      return getTxtEmail();

    case TELEPHONE:
      return getTelephone();

    case CONTACT_PERSON:
      return getContactPerson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_NAME:
      return isSetCompanyName();
    case COMPANY_NAME_LOCAL:
      return isSetCompanyNameLocal();
    case COMPANY_ADDRESS:
      return isSetCompanyAddress();
    case TXT_EMAIL:
      return isSetTxtEmail();
    case TELEPHONE:
      return isSetTelephone();
    case CONTACT_PERSON:
      return isSetContactPerson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Company)
      return this.equals((Company)that);
    return false;
  }

  public boolean equals(Company that) {
    if (that == null)
      return false;

    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }

    boolean this_present_companyNameLocal = true && this.isSetCompanyNameLocal();
    boolean that_present_companyNameLocal = true && that.isSetCompanyNameLocal();
    if (this_present_companyNameLocal || that_present_companyNameLocal) {
      if (!(this_present_companyNameLocal && that_present_companyNameLocal))
        return false;
      if (!this.companyNameLocal.equals(that.companyNameLocal))
        return false;
    }

    boolean this_present_companyAddress = true && this.isSetCompanyAddress();
    boolean that_present_companyAddress = true && that.isSetCompanyAddress();
    if (this_present_companyAddress || that_present_companyAddress) {
      if (!(this_present_companyAddress && that_present_companyAddress))
        return false;
      if (!this.companyAddress.equals(that.companyAddress))
        return false;
    }

    boolean this_present_txtEmail = true && this.isSetTxtEmail();
    boolean that_present_txtEmail = true && that.isSetTxtEmail();
    if (this_present_txtEmail || that_present_txtEmail) {
      if (!(this_present_txtEmail && that_present_txtEmail))
        return false;
      if (!this.txtEmail.equals(that.txtEmail))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_contactPerson = true && this.isSetContactPerson();
    boolean that_present_contactPerson = true && that.isSetContactPerson();
    if (this_present_contactPerson || that_present_contactPerson) {
      if (!(this_present_contactPerson && that_present_contactPerson))
        return false;
      if (!this.contactPerson.equals(that.contactPerson))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_companyName = true && (isSetCompanyName());
    list.add(present_companyName);
    if (present_companyName)
      list.add(companyName);

    boolean present_companyNameLocal = true && (isSetCompanyNameLocal());
    list.add(present_companyNameLocal);
    if (present_companyNameLocal)
      list.add(companyNameLocal);

    boolean present_companyAddress = true && (isSetCompanyAddress());
    list.add(present_companyAddress);
    if (present_companyAddress)
      list.add(companyAddress);

    boolean present_txtEmail = true && (isSetTxtEmail());
    list.add(present_txtEmail);
    if (present_txtEmail)
      list.add(txtEmail);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_contactPerson = true && (isSetContactPerson());
    list.add(present_contactPerson);
    if (present_contactPerson)
      list.add(contactPerson);

    return list.hashCode();
  }

  @Override
  public int compareTo(Company other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyNameLocal()).compareTo(other.isSetCompanyNameLocal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyNameLocal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyNameLocal, other.companyNameLocal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyAddress()).compareTo(other.isSetCompanyAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyAddress, other.companyAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxtEmail()).compareTo(other.isSetTxtEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxtEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txtEmail, other.txtEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContactPerson()).compareTo(other.isSetContactPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactPerson, other.contactPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Company(");
    boolean first = true;

    sb.append("companyName:");
    if (this.companyName == null) {
      sb.append("null");
    } else {
      sb.append(this.companyName);
    }
    first = false;
    if (isSetCompanyNameLocal()) {
      if (!first) sb.append(", ");
      sb.append("companyNameLocal:");
      if (this.companyNameLocal == null) {
        sb.append("null");
      } else {
        sb.append(this.companyNameLocal);
      }
      first = false;
    }
    if (isSetCompanyAddress()) {
      if (!first) sb.append(", ");
      sb.append("companyAddress:");
      if (this.companyAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.companyAddress);
      }
      first = false;
    }
    if (isSetTxtEmail()) {
      if (!first) sb.append(", ");
      sb.append("txtEmail:");
      if (this.txtEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.txtEmail);
      }
      first = false;
    }
    if (isSetTelephone()) {
      if (!first) sb.append(", ");
      sb.append("telephone:");
      if (this.telephone == null) {
        sb.append("null");
      } else {
        sb.append(this.telephone);
      }
      first = false;
    }
    if (isSetContactPerson()) {
      if (!first) sb.append(", ");
      sb.append("contactPerson:");
      if (this.contactPerson == null) {
        sb.append("null");
      } else {
        sb.append(this.contactPerson);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompanyStandardSchemeFactory implements SchemeFactory {
    public CompanyStandardScheme getScheme() {
      return new CompanyStandardScheme();
    }
  }

  private static class CompanyStandardScheme extends StandardScheme<Company> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Company struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyName = iprot.readString();
              struct.setCompanyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_NAME_LOCAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyNameLocal = iprot.readString();
              struct.setCompanyNameLocalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyAddress = iprot.readString();
              struct.setCompanyAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TXT_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txtEmail = iprot.readString();
              struct.setTxtEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTACT_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactPerson = iprot.readString();
              struct.setContactPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Company struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.companyName != null) {
        oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
        oprot.writeString(struct.companyName);
        oprot.writeFieldEnd();
      }
      if (struct.companyNameLocal != null) {
        if (struct.isSetCompanyNameLocal()) {
          oprot.writeFieldBegin(COMPANY_NAME_LOCAL_FIELD_DESC);
          oprot.writeString(struct.companyNameLocal);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyAddress != null) {
        if (struct.isSetCompanyAddress()) {
          oprot.writeFieldBegin(COMPANY_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.companyAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.txtEmail != null) {
        if (struct.isSetTxtEmail()) {
          oprot.writeFieldBegin(TXT_EMAIL_FIELD_DESC);
          oprot.writeString(struct.txtEmail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.telephone != null) {
        if (struct.isSetTelephone()) {
          oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
          oprot.writeString(struct.telephone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contactPerson != null) {
        if (struct.isSetContactPerson()) {
          oprot.writeFieldBegin(CONTACT_PERSON_FIELD_DESC);
          oprot.writeString(struct.contactPerson);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompanyTupleSchemeFactory implements SchemeFactory {
    public CompanyTupleScheme getScheme() {
      return new CompanyTupleScheme();
    }
  }

  private static class CompanyTupleScheme extends TupleScheme<Company> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Company struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyName()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyNameLocal()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyAddress()) {
        optionals.set(2);
      }
      if (struct.isSetTxtEmail()) {
        optionals.set(3);
      }
      if (struct.isSetTelephone()) {
        optionals.set(4);
      }
      if (struct.isSetContactPerson()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCompanyName()) {
        oprot.writeString(struct.companyName);
      }
      if (struct.isSetCompanyNameLocal()) {
        oprot.writeString(struct.companyNameLocal);
      }
      if (struct.isSetCompanyAddress()) {
        oprot.writeString(struct.companyAddress);
      }
      if (struct.isSetTxtEmail()) {
        oprot.writeString(struct.txtEmail);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetContactPerson()) {
        oprot.writeString(struct.contactPerson);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Company struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.companyName = iprot.readString();
        struct.setCompanyNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyNameLocal = iprot.readString();
        struct.setCompanyNameLocalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyAddress = iprot.readString();
        struct.setCompanyAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.txtEmail = iprot.readString();
        struct.setTxtEmailIsSet(true);
      }
      if (incoming.get(4)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contactPerson = iprot.readString();
        struct.setContactPersonIsSet(true);
      }
    }
  }

}

